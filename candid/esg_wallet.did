type Conf = record {
  ticket_price : nat64;
  ledger_canister_id : principal;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type Payment = record {
  ticket_price : nat64;
  payer : text;
  block_height : nat;
  ticket_count : nat64;
  contribution_id: text;
};
type Client = record {
  name: text;
  node_ids: vec text;
};
type Result = variant { Ok : Payment; Err : text };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : (Conf) -> {
  getPrice : (nat64) -> (nat) query;
  getPurchases : () -> (vec Payment) query;
  getTicketPrice : () -> (nat64) query;
  registerPayment: (nat64) -> (text);
  send : (text, nat64) -> (text);
  set_api_key: (text) -> ();
  authorize: (principal) -> ();
  deauthorize: (principal) -> ();
  get_contributions: () -> (text);
  get_contribution_by_entity: (text) -> (text);
  get_contribution_by_id: (text) -> (text);
  setOffsetEmissions: () -> (text);
}
